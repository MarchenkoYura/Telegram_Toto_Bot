import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from data_manager import DataManager
import config
from messages import ADMIN_MESSAGES, USER_MESSAGES, ERROR_MESSAGES, SUCCESS_MESSAGES, NOTIFICATION_MESSAGES, CREATION_MESSAGES
from handlers import CallbackHandler, TextHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TotalizerBot:
    def __init__(self):
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        self.data_manager = DataManager(config.DATA_DIR)
        self.config = config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.callback_handler = CallbackHandler(self)
        self.text_handler = TextHandler(self)
        
        self.setup_handlers()
    
    def get_main_menu(self, is_admin: bool = False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üé≤ –°–æ–±—ã—Ç–∏—è"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üéØ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏"), KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        if is_admin:
            keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    def get_admin_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"), KeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ")],
            [KeyboardButton("üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"), KeyboardButton("üíµ –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    # ========== –£–¢–ò–õ–ò–¢–ù–´–ï –ú–ï–¢–û–î–´ ==========
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == config.ADMIN_ID
    
    async def check_admin_access(self, update: Update, error_message: str = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ"""
        user = update.effective_user
        if not self.is_admin(user.id):
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(error_message)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(error_message)
            return False
        return True
    
    def create_cancel_button(self, callback_data: str, text: str = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å") -> InlineKeyboardButton:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        return InlineKeyboardButton(text, callback_data=callback_data)
    
    def create_back_button(self, callback_data: str, text: str = "üîô –ù–∞–∑–∞–¥") -> InlineKeyboardButton:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        return InlineKeyboardButton(text, callback_data=callback_data)
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
        command_handlers = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            "start": self.start,
            "help": self.help_command,
            "balance": self.balance,
            "events": self.show_events,
            "mybets": self.my_bets,
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            "admin": self.admin_panel,
            "create_event": self.create_event,
            "close_event": self.close_event,
            "add_balance": self.add_balance,
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        for command, handler_func in command_handlers.items():
            self.application.add_handler(CommandHandler(command, handler_func))
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        special_handlers = [
            (CallbackQueryHandler, self.button_callback),
            (MessageHandler, self.handle_text, filters.TEXT & ~filters.COMMAND),
            (MessageHandler, self.handle_photo, filters.PHOTO),
        ]
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler_args in special_handlers:
            if len(handler_args) == 2:
                handler_class, handler_func = handler_args
                self.application.add_handler(handler_class(handler_func))
            else:
                handler_class, handler_func, handler_filter = handler_args
                self.application.add_handler(handler_class(handler_filter, handler_func))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db_user = self.data_manager.get_user(user.id)
            
            if not db_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_user = self.data_manager.create_user(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name
                )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ messages.py
            welcome_text = USER_MESSAGES['start']
            
            if user.id == config.ADMIN_ID:
                welcome_text += "\nüëë –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            is_admin = user.id == config.ADMIN_ID
            reply_markup = self.get_main_menu(is_admin)
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user = update.effective_user
        
        help_text = USER_MESSAGES['help']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        is_admin = user.id == config.ADMIN_ID
        reply_markup = self.get_main_menu(is_admin)
        
        await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance"""
        user = update.effective_user
        
        try:
            db_user = self.data_manager.get_user(user.id)
            if db_user:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö
                active_bets = self.data_manager.get_active_bets_count(user.id)
                
                active_bets_info = f"\nüéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {active_bets}" if active_bets > 0 else ""
                
                balance_text = CREATION_MESSAGES['user_balance'].format(
                    balance=db_user['balance'],
                    active_bets_info=active_bets_info
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                is_admin = user.id == config.ADMIN_ID
                reply_markup = self.get_main_menu(is_admin)
                
                await update.message.reply_text(balance_text, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ balance: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

    async def show_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /events - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        try:
            events = self.data_manager.get_active_events()
            
            if not events:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫")
                return
            
            keyboard = []
            for event in events:
                button_text = f"üéØ {event['title']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"event_{event['id']}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üé≤ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_events: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π")

    async def my_bets(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /mybets - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        try:
            db_user = self.data_manager.get_user(user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            bets = self.data_manager.get_user_bets(user.id, 10)
            
            if not bets:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
            bets_list = []
            for bet in bets:
                event = self.data_manager.get_event(bet['event_id'])
                if not event:
                    continue
                
                option_text = event['option1'] if bet['option'] == 1 else event['option2']
                
                if event['is_active']:
                    status = "‚è≥ –ê–∫—Ç–∏–≤–Ω–∞"
                elif bet['is_won'] is True:
                    win_amount = bet['amount'] * bet['odds']
                    status = f"‚úÖ –í—ã–∏–≥—Ä–∞–Ω–∞ (+{win_amount:.2f} –º–æ–Ω–µ—Ç)"
                elif bet['is_won'] is False:
                    status = "‚ùå –ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"
                else:
                    status = "‚è∏ –ñ–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                
                bet_item = CREATION_MESSAGES['bet_item'].format(
                    event_title=event['title'],
                    option=option_text,
                    amount=bet['amount'],
                    odds=bet['odds'],
                    status=status
                ).strip()
                
                bets_list.append(bet_item)
            
            bets_text = CREATION_MESSAGES['user_bets_list'].format(
                bets_list='\n\n'.join(bets_list)
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            is_admin = user.id == config.ADMIN_ID
            reply_markup = self.get_main_menu(is_admin)
            
            await update.message.reply_text(bets_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ my_bets: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞–≤–æ–∫")

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"):
            return
        
        admin_text = ADMIN_MESSAGES['help']
        
        await update.message.reply_text(admin_text, parse_mode='Markdown')

    async def create_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"):
            return
        
        if not context.args:
            await update.message.reply_text(CREATION_MESSAGES['create_event_help'], parse_mode='Markdown')
            return
        
        try:
            # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
            event_data = ' '.join(context.args)
            parts = event_data.split(';')
            
            if len(parts) < 5 or len(parts) > 6:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ;–í–∞—Ä–∏–∞–Ω—Ç1;–í–∞—Ä–∏–∞–Ω—Ç2;–ö–æ—ç—Ñ1;–ö–æ—ç—Ñ2;URL_–∫–∞—Ä—Ç–∏–Ω–∫–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)")
                return
            
            title = parts[0].strip()
            option1 = parts[1].strip()
            option2 = parts[2].strip()
            odds1 = float(parts[3].strip())
            odds2 = float(parts[4].strip())
            
            # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
            image_url = None
            if len(parts) == 6:
                image_url = parts[5].strip()
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
                if image_url and not (image_url.startswith('http://') or image_url.startswith('https://')):
                    await update.message.reply_text("‚ùå URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                    return
            
            event = self.data_manager.create_event(
                title=title,
                option1=option1,
                option2=option2,
                odds1=odds1,
                odds2=odds2,
                image_url=image_url
            )
            
            success_text = SUCCESS_MESSAGES['event_created_simple'].format(
                title=event['title'],
                option1=event['option1'],
                option2=event['option2'],
                odds1=event['odds1'],
                odds2=event['odds2'],
                event_id=event['id']
            )
            
            if event.get('image_file_id') or event.get('image_url'):
                success_text += f"\nüñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞"
            
            await update.message.reply_text(success_text, parse_mode='Markdown')
            
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

    async def close_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–±—ã—Ç–∏–π"):
            return
        
        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /close_event [ID —Å–æ–±—ã—Ç–∏—è] [—Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1 –∏–ª–∏ 2]")
            return
        
        try:
            event_id = int(context.args[0])
            result = int(context.args[1])
            
            if result not in [1, 2]:
                await update.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2")
                return
            
            event = self.data_manager.get_event(event_id)
            if not event:
                await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            if not event['is_active']:
                await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ")
                return
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.data_manager.close_event(event_id, result)
            
            # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Å—Ç–∞–≤–æ–∫
            stats = self.data_manager.process_event_results(event_id, result)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—Ö —Å—Ç–∞–≤–æ–∫
            await self.notify_players_about_results(event, result)
            
            winning_option = event['option1'] if result == 1 else event['option2']
            
            result_text = SUCCESS_MESSAGES['event_closed_simple'].format(
                title=event['title'],
                winning_option=winning_option,
                total_bets=stats['total_bets'],
                winners=stats['winners'],
                total_payouts=stats['total_payouts']
            )
            
            await update.message.reply_text(result_text, parse_mode='Markdown')
            
        except ValueError:
            await update.message.reply_text("‚ùå ID —Å–æ–±—ã—Ç–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–±—ã—Ç–∏—è")

    async def add_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"):
            return
        
        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add_balance [Telegram ID] [—Å—É–º–º–∞]")
            return
        
        try:
            telegram_id = int(context.args[0])
            amount = float(context.args[1])
            
            target_user = self.data_manager.get_user(telegram_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            old_balance = target_user['balance']
            success = self.data_manager.add_balance(telegram_id, amount)
            
            if success:
                new_user = self.data_manager.get_user(telegram_id)
                result_text = SUCCESS_MESSAGES['balance_changed'].format(
                    first_name=target_user['first_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    telegram_id=target_user['telegram_id'],
                    old_balance=old_balance,
                    amount=amount,
                    new_balance=new_user['balance']
                )
                await update.message.reply_text(result_text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
            
        except ValueError:
            await update.message.reply_text("‚ùå ID –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

    async def safe_edit_message(self, update: Update, text: str, parse_mode: str = 'HTML', reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if update.callback_query.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await update.callback_query.delete_message()
                await update.callback_query.message.reply_text(
                    text, 
                    parse_mode=parse_mode, 
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.edit_message_text(
                    text, 
                    parse_mode=parse_mode, 
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ safe_edit_message: {e}")
            try:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.reply_text(
                    text, 
                    parse_mode=parse_mode, 
                    reply_markup=reply_markup
                )
            except:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback
                await update.callback_query.answer(text)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–º—É CallbackHandler
        await self.callback_handler.handle_callback(update, context, query.data)

    async def show_events_inline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ inline —Ä–µ–∂–∏–º–µ"""
        try:
            events = self.data_manager.get_active_events()
            
            if not events:
                await self.safe_edit_message(update, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫")
                return
            
            keyboard = []
            for event in events:
                button_text = f"üéØ {event['title']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"event_{event['id']}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.safe_edit_message(
                update,
                "üé≤ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_events_inline: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π")

    async def show_event_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è"""
        try:
            event_id = int(callback_data.split("_")[1])
            event = self.data_manager.get_event(event_id)
            
            if not event or not event['is_active']:
                await self.safe_edit_message(update, "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")
                return
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫
            event_bets = self.data_manager.get_event_bets(event_id)
            total_bets = len(event_bets)
            
            event_text = CREATION_MESSAGES['event_details'].format(
                title=event['title'],
                description=event['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                option1=event['option1'],
                option2=event['option2'],
                odds1=event['odds1'],
                odds2=event['odds2'],
                total_bets=total_bets
            )
            
            keyboard = [
                [InlineKeyboardButton(f"1Ô∏è‚É£ {event['option1']} ({event['odds1']})", callback_data=f"bet_{event_id}_1")],
                [InlineKeyboardButton(f"2Ô∏è‚É£ {event['option2']} ({event['odds2']})", callback_data=f"bet_{event_id}_2")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="back_to_events")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω–æ
            if event.get('image_file_id') or event.get('image_url'):
                try:
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É file_id, –ø–æ—Ç–æ–º URL
                    photo = event.get('image_file_id') or event.get('image_url')
                    
                    await update.callback_query.message.reply_photo(
                        photo=photo,
                        caption=event_text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await update.callback_query.delete_message()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
                    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –Ω–µ—ë
                    await self.safe_edit_message(
                        update,
                        event_text + "\n\n‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                await self.safe_edit_message(
                    update,
                    event_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_event_details: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏—è")

    async def make_bet(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏"""
        try:
            parts = callback_data.split("_")
            event_id = int(parts[1])
            option = int(parts[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['betting_event_id'] = event_id
            context.user_data['betting_option'] = option
            context.user_data['betting_step'] = 'waiting_amount'
            
            event = self.data_manager.get_event(event_id)
            option_text = event['option1'] if option == 1 else event['option2']
            odds = event['odds1'] if option == 1 else event['odds2']
            
            bet_text = CREATION_MESSAGES['bet_amount_input'].format(
                event_title=event['title'],
                option_text=option_text,
                odds=odds
            )
            
            await self.safe_edit_message(update, bet_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ make_bet: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–º—É TextHandler
        await self.text_handler.handle_text(update, context, text)

    async def process_bet_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE, amount_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏"""
        user = update.effective_user
        
        try:
            amount = float(amount_text)
            
            if amount < 10:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 10 –º–æ–Ω–µ—Ç")
                return
            
            event_id = context.user_data.get('betting_event_id')
            option = context.user_data.get('betting_option')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
            db_user = self.data_manager.get_user(user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if db_user['balance'] < amount:
                await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {db_user['balance']:.2f} –º–æ–Ω–µ—Ç")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = self.data_manager.get_event(event_id)
            if not event or not event['is_active']:
                await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
            odds = event['odds1'] if option == 1 else event['odds2']
            option_text = event['option1'] if option == 1 else event['option2']
            
            bet = self.data_manager.create_bet(
                telegram_id=user.id,
                event_id=event_id,
                amount=amount,
                option=option,
                odds=odds
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            updated_user = self.data_manager.get_user(user.id)
            potential_win = amount * odds
            
            success_text = SUCCESS_MESSAGES['bet_accepted'].format(
                event_title=event['title'],
                option_text=option_text,
                amount=amount,
                odds=odds,
                potential_win=potential_win,
                new_balance=updated_user['balance']
            )
            
            await update.message.reply_text(success_text, parse_mode='Markdown')
            
        except ValueError as e:
            if "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in str(e) or "–°–æ–±—ã—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ" in str(e):
                await update.message.reply_text(f"‚ùå {e}")
            else:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")
            context.user_data.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏")
            context.user_data.clear()

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏ –∂–¥–µ—Ç —Ñ–æ—Ç–æ
        if (context.user_data.get('creating_event') and 
            user.id == config.ADMIN_ID and 
            context.user_data.get('event_step') == 'waiting_photo'):
            await self.process_event_photo(update, context)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        elif (context.user_data.get('creating_proposal') and 
              context.user_data.get('proposal_step') == 'waiting_photo'):
            await self.process_proposal_photo(update, context)
        else:
            await update.message.reply_text(
                "üñºÔ∏è –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! –ù–æ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å –Ω–µ–π –¥–µ–ª–∞—Ç—å.\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'.\n"
                "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üÜï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'."
            )

    async def process_event_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
        context.user_data['event_image_file_id'] = file_id
        
        await update.message.reply_text(
            "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
            ]])
        )
        
        context.user_data['event_step'] = 'waiting_title'

    async def process_proposal_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
        context.user_data['proposal_image_file_id'] = file_id
        
        await update.message.reply_text(
            "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")
            ]])
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        context.user_data['proposal_step'] = 'waiting_title'

    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ==========

    async def admin_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"):
            return
        
        admin_text = ADMIN_MESSAGES['panel']
        
        reply_markup = self.get_admin_menu()
        await update.message.reply_text(admin_text, parse_mode='Markdown', reply_markup=reply_markup        )

    async def start_event_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"):
            return
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        context.user_data['creating_event'] = True
        context.user_data['event_step'] = 'choose_method'
        
        keyboard = [
            [InlineKeyboardButton("üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="event_with_photo")],
            [InlineKeyboardButton("üìù –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="event_without_photo")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def process_event_creation_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        step = context.user_data.get('event_step')
        
        if step == 'waiting_title':
            context.user_data['event_title'] = text
            context.user_data['event_step'] = 'waiting_option1'
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å—Ö–æ–¥–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
                ]])
            )
            
        elif step == 'waiting_option1':
            context.user_data['event_option1'] = text
            context.user_data['event_step'] = 'waiting_option2'
            await update.message.reply_text(
                f"‚úÖ –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å—Ö–æ–¥–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
                ]])
            )
            
        elif step == 'waiting_option2':
            context.user_data['event_option2'] = text
            context.user_data['event_step'] = 'waiting_odds1'
            await update.message.reply_text(
                f"‚úÖ –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è '{context.user_data['event_option1']}' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.8):",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
                ]])
            )
            
        elif step == 'waiting_odds1':
            try:
                odds1 = float(text)
                context.user_data['event_odds1'] = odds1
                context.user_data['event_step'] = 'waiting_odds2'
                await update.message.reply_text(
                    f"‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è '{context.user_data['event_option1']}': {odds1}\n\n"
                    f"üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è '{context.user_data['event_option2']}' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.1):",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
                    ]])
                )
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.8)")
                
        elif step == 'waiting_odds2':
            try:
                odds2 = float(text)
                context.user_data['event_odds2'] = odds2
                await self.finalize_event_creation(update, context)
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.1)")

    async def finalize_event_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            event = self.data_manager.create_event(
                title=context.user_data['event_title'],
                option1=context.user_data['event_option1'],
                option2=context.user_data['event_option2'],
                odds1=context.user_data['event_odds1'],
                odds2=context.user_data['event_odds2'],
                image_file_id=context.user_data.get('event_image_file_id')
            )
            
            success_text = SUCCESS_MESSAGES['event_created_simple'].format(
                title=event['title'],
                option1=event['option1'],
                option2=event['option2'],
                odds1=event['odds1'],
                odds2=event['odds2'],
                event_id=event['id']
            )
            
            if event.get('image_file_id') or event.get('image_url'):
                success_text += "\nüñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
            reply_markup = self.get_admin_menu()
            
            await update.message.reply_text(
                success_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            context.user_data.clear()

    async def start_event_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Ñ–æ—Ç–æ"""
        context.user_data['creating_event'] = True
        context.user_data['event_step'] = 'waiting_photo'
        
        await update.callback_query.edit_message_text(
            "üñºÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π**\n\n"
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
            ]])
        )

    async def start_event_without_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —Ñ–æ—Ç–æ"""
        context.user_data['creating_event'] = True
        context.user_data['event_step'] = 'waiting_title'
        
        await update.callback_query.edit_message_text(
            "üìù **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏**\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation")
            ]])
        )

    async def cancel_event_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        context.user_data.clear()
        
        reply_markup = self.get_admin_menu()
        
        await update.callback_query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "üëë –í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
            reply_markup=reply_markup
        )

    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        is_admin = user.id == config.ADMIN_ID
        
        reply_markup = self.get_main_menu(is_admin)
        await update.message.reply_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def create_event_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"):
            return
        
        await update.message.reply_text(ADMIN_MESSAGES['event_creation_format'], parse_mode='Markdown')

    async def close_event_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–±—ã—Ç–∏–π"):
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = self.data_manager.get_active_events()
        
        if not events:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        events_list = []
        for event in events:
            event_item = CREATION_MESSAGES['event_list_item'].format(
                event_id=event['id'],
                title=event['title'],
                option1=event['option1'],
                option2=event['option2']
            ).strip()
            events_list.append(event_item)
        
        help_text = CREATION_MESSAGES['close_event_help'].format(
            events_list='\n\n'.join(events_list)
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def add_balance_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"):
            return
        
        await update.message.reply_text(ADMIN_MESSAGES['add_balance_format'], parse_mode='Markdown')

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
            return
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            users = self.data_manager._load_json(self.data_manager.users_file)
            events = self.data_manager._load_json(self.data_manager.events_file)
            bets = self.data_manager._load_json(self.data_manager.bets_file)
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = len(users)
            total_events = len(events)
            active_events = len([e for e in events.values() if e.get('is_active')])
            total_bets = len(bets)
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫
            total_balance = sum(user.get('balance', 0) for user in users.values())
            total_bet_amount = sum(bet.get('amount', 0) for bet in bets.values())
            
            # –°—á–∏—Ç–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            won_bets = len([b for b in bets.values() if b.get('is_won') is True])
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π
            win_percentage = (won_bets/total_bets*100) if total_bets > 0 else 0
            
            stats_text = ADMIN_MESSAGES['detailed_stats'].format(
                total_users=total_users,
                total_balance=total_balance,
                total_events=total_events,
                active_events=active_events,
                total_bets=total_bets,
                won_bets=won_bets,
                win_percentage=win_percentage
            )
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    # ========== –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –°–û–ë–´–¢–ò–ô ==========

    async def start_proposal_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user = update.effective_user
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="proposal_with_photo")],
            [InlineKeyboardButton("üìù –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="proposal_without_photo")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def start_proposal_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ"""
        context.user_data['creating_proposal'] = True
        context.user_data['proposal_step'] = 'waiting_photo'
        
        await update.callback_query.edit_message_text(
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π**\n\n"
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")
            ]])
        )

    async def start_proposal_without_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ"""
        context.user_data['creating_proposal'] = True
        context.user_data['proposal_step'] = 'waiting_title'
        
        await update.callback_query.edit_message_text(
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏**\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")
            ]])
        )

    async def process_proposal_creation_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        step = context.user_data.get('proposal_step')
        
        if step == 'waiting_title':
            context.user_data['proposal_title'] = text
            context.user_data['proposal_step'] = 'waiting_option1'
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å—Ö–æ–¥–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")
                ]])
            )
            
        elif step == 'waiting_option1':
            context.user_data['proposal_option1'] = text
            context.user_data['proposal_step'] = 'waiting_option2'
            await update.message.reply_text(
                f"‚úÖ –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å—Ö–æ–¥–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")
                ]])
            )
            
        elif step == 'waiting_option2':
            context.user_data['proposal_option2'] = text
            context.user_data['proposal_step'] = 'waiting_description'
            await update.message.reply_text(
                f"‚úÖ –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_proposal_creation")
                ]])
            )
            
        elif step == 'waiting_description':
            description = None if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else text
            await self.finalize_proposal_creation(update, context, description)

    async def finalize_proposal_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, description: str = None):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        user = update.effective_user
        
        try:
            proposal = self.data_manager.create_proposal(
                telegram_id=user.id,
                title=context.user_data['proposal_title'],
                option1=context.user_data['proposal_option1'],
                option2=context.user_data['proposal_option2'],
                description=description,
                image_file_id=context.user_data.get('proposal_image_file_id')
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
            image_info = "üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if proposal.get('image_file_id') else "üìù –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
            
            success_text = CREATION_MESSAGES['proposal_sent_user'].format(
                title=proposal['title'],
                option1=proposal['option1'],
                option2=proposal['option2'],
                description=proposal['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                image_info=image_info,
                proposal_id=proposal['id']
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            is_admin = user.id == config.ADMIN_ID
            reply_markup = self.get_main_menu(is_admin)
            
            await update.message.reply_text(
                success_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            await self.notify_admin_about_proposal(proposal)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            context.user_data.clear()

    async def notify_admin_about_proposal(self, proposal: dict):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            image_info = "üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if proposal.get('image_file_id') else "üìù –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
            
            notification_text = NOTIFICATION_MESSAGES['admin_new_proposal'].format(
                author=proposal['first_name'],
                username=proposal['username'] or '–Ω–µ—Ç username',
                title=proposal['title'],
                description=proposal['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                option1=proposal['option1'],
                option2=proposal['option2'],
                image_info=image_info,
                proposal_id=proposal['id']
            )
            
            await self.application.bot.send_message(
                chat_id=config.ADMIN_ID,
                text=notification_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")

    async def show_proposals_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"):
            return
        
        try:
            pending_proposals = self.data_manager.get_pending_proposals()
            
            if not pending_proposals:
                await update.message.reply_text(
                    "üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                    reply_markup=self.get_admin_menu()
                )
                return
            
            proposals_text = "üìã **–û–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n\n"
            keyboard = []
            
            for proposal in pending_proposals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
                image_info = "üñºÔ∏è" if proposal.get('image_file_id') else "üìù"
                proposals_text += f"**ID {proposal['id']}:** {proposal['title']} {image_info}\n"
                proposals_text += f"üë§ –û—Ç: {proposal['first_name']}\n"
                proposals_text += f"1Ô∏è‚É£ {proposal['option1']} | 2Ô∏è‚É£ {proposal['option2']}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal['id']}", callback_data=f"proposal_view_{proposal['id']}")
                ])
            
            if len(pending_proposals) > 10:
                proposals_text += f"... –∏ –µ—â–µ {len(pending_proposals) - 10} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                proposals_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_proposals_menu: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

    async def show_proposals_inline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ inline —Ä–µ–∂–∏–º–µ"""
        if not await self.check_admin_access(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"):
            return
        
        try:
            pending_proposals = self.data_manager.get_pending_proposals()
            
            if not pending_proposals:
                await update.callback_query.edit_message_text(
                    "üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                    ]])
                )
                return
            
            proposals_text = "üìã **–û–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n\n"
            keyboard = []
            
            for proposal in pending_proposals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
                image_info = "üñºÔ∏è" if proposal.get('image_file_id') else "üìù"
                proposals_text += f"**ID {proposal['id']}:** {proposal['title']} {image_info}\n"
                proposals_text += f"üë§ –û—Ç: {proposal['first_name']}\n"
                proposals_text += f"1Ô∏è‚É£ {proposal['option1']} | 2Ô∏è‚É£ {proposal['option2']}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal['id']}", callback_data=f"proposal_view_{proposal['id']}")
                ])
            
            if len(pending_proposals) > 10:
                proposals_text += f"... –∏ –µ—â–µ {len(pending_proposals) - 10} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                proposals_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_proposals_inline: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

    async def handle_proposal_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        if not await self.check_admin_access(update, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"):
            return
        
        try:
            parts = callback_data.split("_")
            action = parts[1]
            proposal_id = int(parts[2])
            
            if action == "view":
                await self.show_proposal_details(update, context, proposal_id)
            elif action == "approve":
                await self.approve_proposal_dialog(update, context, proposal_id)
            elif action == "reject":
                await self.reject_proposal_dialog(update, context, proposal_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_proposal_action: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

    async def show_proposal_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, proposal_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            proposal = self.data_manager.get_proposal(proposal_id)
            
            if not proposal:
                await update.callback_query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            image_info = "üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if proposal.get('image_file_id') else "üìù –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
            
            details_text = CREATION_MESSAGES['proposal_details'].format(
                proposal_id=proposal['id'],
                author=proposal['first_name'],
                username=proposal['username'] or '–Ω–µ—Ç username',
                title=proposal['title'],
                description=proposal['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                option1=proposal['option1'],
                option2=proposal['option2'],
                image_info=image_info
            ) + f"""

üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {proposal['created_at'][:16].replace('T', ' ')}
‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> {proposal['status']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"proposal_approve_{proposal_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"proposal_reject_{proposal_id}")],
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_proposals")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
            if proposal.get('image_file_id'):
                try:
                    await update.callback_query.message.reply_photo(
                        photo=proposal['image_file_id'],
                        caption=details_text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await update.callback_query.delete_message()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
                    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –Ω–µ—ë
                    await update.callback_query.edit_message_text(
                        details_text + "\n\n‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                await update.callback_query.edit_message_text(
                    details_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_proposal_details: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

    async def approve_proposal_dialog(self, update: Update, context: ContextTypes.DEFAULT_TYPE, proposal_id: int):
        """–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            proposal = self.data_manager.get_proposal(proposal_id)
            
            if not proposal:
                await self.safe_edit_message(update, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            await self.start_custom_odds_input(update, context, proposal_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")

    async def approve_proposal_with_odds(self, update: Update, context: ContextTypes.DEFAULT_TYPE, proposal_id: int, odds1: float, odds2: float):
        """–û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏"""
        try:
            proposal = self.data_manager.get_proposal(proposal_id)
            
            if not proposal:
                await self.safe_edit_message(update, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –û–¥–æ–±—Ä—è–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
            result = self.data_manager.approve_proposal(proposal_id, odds1, odds2)
            
            success_text = CREATION_MESSAGES['proposal_approved_admin'].format(
                proposal_id=proposal_id,
                author=proposal['first_name'],
                event_title=result['event']['title'],
                event_id=result['event']['id'],
                odds1=odds1,
                odds2=odds2
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.notify_user_about_approval(proposal, result['event'])
            
            await self.safe_edit_message(
                update,
                success_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="back_to_proposals")
                ]])
            )
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('approving_proposal_id', None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

    async def start_custom_odds_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, proposal_id: int):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
        try:
            proposal = self.data_manager.get_proposal(proposal_id)
            
            if not proposal:
                await self.safe_edit_message(update, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['custom_odds_proposal_id'] = proposal_id
            context.user_data['custom_odds_step'] = 'waiting_odds1'
            
            custom_text = CREATION_MESSAGES['custom_odds_input_step1'].format(
                proposal_id=proposal_id,
                title=proposal['title'],
                option1=proposal['option1'],
                option2=proposal['option2']
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"proposal_view_{proposal_id}")]
            ]
            
            await self.safe_edit_message(
                update,
                custom_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")

    async def handle_odds_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: "odds_1.5_2.5_123"
            parts = callback_data.split("_")
            odds1 = float(parts[1])
            odds2 = float(parts[2]) 
            proposal_id = int(parts[3])
            
            await self.approve_proposal_with_odds(update, context, proposal_id, odds1, odds2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            await self.safe_edit_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")

    async def process_custom_odds_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
        try:
            step = context.user_data.get('custom_odds_step')
            proposal_id = context.user_data.get('custom_odds_proposal_id')
            
            if not proposal_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                context.user_data.clear()
                return
            
            proposal = self.data_manager.get_proposal(proposal_id)
            if not proposal:
                await update.message.reply_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                context.user_data.clear()
                return
            
            try:
                coefficient = float(text.replace(',', '.'))
                if coefficient <= 0 or coefficient > 10:
                    await update.message.reply_text("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0.1 –¥–æ 10.0")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.8)")
                return
            
            if step == 'waiting_odds1':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                context.user_data['custom_odds1'] = coefficient
                context.user_data['custom_odds_step'] = 'waiting_odds2'
                
                odds_text = CREATION_MESSAGES['custom_odds_input_step2'].format(
                    proposal_id=proposal_id,
                    title=proposal['title'],
                    option1=proposal['option1'],
                    option2=proposal['option2'],
                    odds1=coefficient
                )
                
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"proposal_view_{proposal_id}")]
                ]
                
                await update.message.reply_text(
                    odds_text,
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
            elif step == 'waiting_odds2':
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏ –æ–¥–æ–±—Ä—è–µ–º
                odds1 = context.user_data.get('custom_odds1')
                odds2 = coefficient
                
                if not odds1:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    context.user_data.clear()
                    return
                
                # –û–¥–æ–±—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
                result = self.data_manager.approve_proposal(proposal_id, odds1, odds2)
                
                success_text = f"""
‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>

üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{proposal_id}</b> –æ—Ç {proposal['first_name']}
üéØ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ <b>"{result['event']['title']}"</b> (ID: {result['event']['id']})
üí∞ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b> {odds1} / {odds2}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
                """
                
                is_admin = update.effective_user.id == config.ADMIN_ID
                reply_markup = self.get_admin_menu() if is_admin else self.get_main_menu()
                
                await update.message.reply_text(
                    success_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.notify_user_about_approval(proposal, result['event'])
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.clear()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
            context.user_data.clear()

    async def reject_proposal_dialog(self, update: Update, context: ContextTypes.DEFAULT_TYPE, proposal_id: int):
        """–î–∏–∞–ª–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            proposal = self.data_manager.get_proposal(proposal_id)
            
            if not proposal:
                await update.callback_query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            success = self.data_manager.reject_proposal(proposal_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            
            if success:
                success_text = CREATION_MESSAGES['proposal_rejected_admin'].format(
                    proposal_id=proposal_id,
                    author=proposal['first_name'],
                    title=proposal['title']
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.notify_user_about_rejection(proposal)
                
                await update.callback_query.edit_message_text(
                    success_text,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="back_to_proposals")
                    ]])
                )
            else:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

    async def notify_user_about_approval(self, proposal: dict, event: dict):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            notification_text = NOTIFICATION_MESSAGES['user_proposal_approved'].format(
                title=proposal['title'],
                proposal_id=proposal['id'],
                event_id=event['id'],
                odds1=event['odds1'],
                odds2=event['odds2']
            )
            
            await self.application.bot.send_message(
                chat_id=proposal['telegram_id'],
                text=notification_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")

    async def notify_user_about_rejection(self, proposal: dict):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            notification_text = NOTIFICATION_MESSAGES['user_proposal_rejected'].format(
                title=proposal['title']
            )
            
            await self.application.bot.send_message(
                chat_id=proposal['telegram_id'],
                text=notification_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    async def notify_players_about_results(self, event: dict, winning_option: int):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—Ö —Å—Ç–∞–≤–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
            event_bets = self.data_manager.get_event_bets(event['id'])
            
            if not event_bets:
                return
            
            winning_text = event['option1'] if winning_option == 1 else event['option2']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_bets = {}
            for bet in event_bets:
                user_id = bet['telegram_id']
                if user_id not in user_bets:
                    user_bets[user_id] = []
                user_bets[user_id].append(bet)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
            for user_id, bets in user_bets.items():
                try:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    total_bet_amount = 0
                    total_winnings = 0
                    won_bets = 0
                    lost_bets = 0
                    
                    bet_details = []
                    
                    for bet in bets:
                        total_bet_amount += bet['amount']
                        bet_option_text = event['option1'] if bet['option'] == 1 else event['option2']
                        
                        if bet['option'] == winning_option:
                            # –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞
                            payout = bet['amount'] * bet['odds']
                            total_winnings += payout
                            won_bets += 1
                            bet_details.append(f"‚úÖ {bet_option_text}: {bet['amount']:.0f} ‚Üí {payout:.0f} –º–æ–Ω–µ—Ç (–∫–æ—ç—Ñ. {bet['odds']})")
                        else:
                            # –ü—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞
                            lost_bets += 1
                            bet_details.append(f"‚ùå {bet_option_text}: {bet['amount']:.0f} –º–æ–Ω–µ—Ç (–∫–æ—ç—Ñ. {bet['odds']})")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if total_winnings > 0:
                        # –ï—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∏
                        profit = total_winnings - total_bet_amount
                        if profit > 0:
                            result_emoji = "üéâ"
                            result_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {profit:.0f} –º–æ–Ω–µ—Ç!"
                        else:
                            result_emoji = "üòê"
                            result_text = f"–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–∏ —Å–≤–æ–∏—Ö (–≤—ã–∏–≥—Ä–∞–ª–∏ {total_winnings:.0f}, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {total_bet_amount:.0f})"
                    else:
                        result_emoji = "üòî"
                        result_text = f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {total_bet_amount:.0f} –º–æ–Ω–µ—Ç"
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if profit > 0:
                        template = NOTIFICATION_MESSAGES['bet_result_win']
                    elif profit == 0:
                        template = NOTIFICATION_MESSAGES['bet_result_even']
                    else:
                        template = NOTIFICATION_MESSAGES['bet_result_loss']
                    
                    notification_text = template.format(
                        event_title=event['title'],
                        winning_option=winning_text,
                        bet_details=chr(10).join(bet_details),
                        result_text=result_text
                    )
                    
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=notification_text,
                        parse_mode='HTML'
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {e}")

    async def cancel_proposal_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        context.user_data.clear()
        
        is_admin = update.effective_user.id == config.ADMIN_ID
        reply_markup = self.get_main_menu(is_admin)
        
        await update.callback_query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=reply_markup
        )

    async def skip_proposal_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        await self.finalize_proposal_creation_from_callback(update, context, None)

    async def finalize_proposal_creation_from_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, description: str = None):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback query"""
        user = update.effective_user
        
        try:
            proposal = self.data_manager.create_proposal(
                telegram_id=user.id,
                title=context.user_data['proposal_title'],
                option1=context.user_data['proposal_option1'],
                option2=context.user_data['proposal_option2'],
                description=description,
                image_file_id=context.user_data.get('proposal_image_file_id')
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
            image_info = "üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if proposal.get('image_file_id') else "üìù –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
            
            success_text = CREATION_MESSAGES['proposal_sent_user'].format(
                title=proposal['title'],
                option1=proposal['option1'],
                option2=proposal['option2'],
                description=proposal['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                image_info=image_info,
                proposal_id=proposal['id']
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            is_admin = user.id == config.ADMIN_ID
            reply_markup = self.get_main_menu(is_admin)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await update.callback_query.message.reply_text(
                success_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.delete_message()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            await self.notify_admin_about_proposal(proposal)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            context.user_data.clear()

    async def back_to_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
        admin_text = ADMIN_MESSAGES['panel']
        
        reply_markup = self.get_admin_menu()
        
        await update.callback_query.edit_message_text(
            admin_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞-—Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        print("‚úÖ –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        bot = TotalizerBot()
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")